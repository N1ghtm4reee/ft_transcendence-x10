---
- name: Installing k3s in master node
  hosts: master
  become: true
  tasks:
    - name: Run the script to setup master node
      ansible.builtin.script: ../scripts/master.sh

    - name: Copy token to local file system
      ansible.builtin.fetch:
        src: /home/token.txt
        dest: ../env_files/token.txt
        flat: yes

- name: Installing k3s in agent nodes and joining master node server with token
  hosts: workers
  become: true
  vars:
    master_ip: "{{ hostvars[groups['master'][0]]['ansible_default_ipv4']['address'] }}"
  tasks:
    - name: Copy token file to the cloud machine filesystem
      ansible.builtin.copy:
        src: ../env_files/token.txt
        dest: /home/token.txt
        mode: '0644'

    - name: Copy worker.sh to the cloud machine
      ansible.builtin.copy:
        src: ../scripts/worker.sh
        dest: /home/worker.sh
        mode: '0755'

    - name: Install k3s and join nodes to server
      ansible.builtin.shell: /home/worker.sh

- name: Installing dashboard UI for cluster visualization
  hosts: master
  become: true
  tasks:
    - name: Run the dashboard script
      ansible.builtin.script: ../scripts/dashboard.sh

    - name: Fetch dashboard_token.txt to local machine
      ansible.builtin.fetch:
        src: /home/dashboard_token.txt
        dest: ../env_files/dashboard_token.txt
        flat: yes

    - name: Fetch dashboard_ip_port.txt to local machine
      ansible.builtin.fetch:
        src: /home/dashboard_ip_port.txt
        dest: ../env_files/dashboard_ip_port.txt
        flat: yes

- name: Copy manifests to cloud machine
  hosts: master
  become: true
  tasks:
    - name: Copy entire manifests directory to cloud machine
      ansible.builtin.copy:
        src: ../../k8s/manifests/
        dest: /home/manifests/
        mode: '0644'

- name: Configure NFS Server
  hosts: nfs
  become: true
  vars:
    nfs_export_path: "/srv/nfs/logs"
    nfs_export_options: "*(rw,sync,no_subtree_check,no_root_squash)"
    
  tasks:    
    - name: Wait for apt lock to be released
      shell: while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done
      changed_when: false

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      timeout: 300
    
    - name: Install NFS packages
      apt:
        name: 
          - nfs-kernel-server
          - nfs-common
        state: present
      timeout: 300
    
    - name: Create NFS directory
      file:
        path: "{{ nfs_export_path }}"
        state: directory
        mode: '0755'
        recurse: yes
    
    - name: Set ownership of NFS directory
      file:
        path: "{{ nfs_export_path }}"
        owner: nobody
        group: nogroup
        recurse: yes
    
    - name: Check if export already exists in /etc/exports
      lineinfile:
        path: /etc/exports
        line: "{{ nfs_export_path }} {{ nfs_export_options }}"
        state: present
        create: yes
        backup: yes
      register: exports_changed
    
    - name: Export NFS shares
      command: exportfs -rav
      when: exports_changed.changed
      notify: restart nfs server
    
    - name: Start and enable nfs-kernel-server
      systemd:
        name: nfs-kernel-server
        state: started
        enabled: yes
    
    - name: Check NFS server status
      command: systemctl is-active nfs-kernel-server
      register: nfs_status
      changed_when: false
      failed_when: nfs_status.stdout != "active"
      
  handlers:
    - name: restart nfs server
      systemd:
        name: nfs-kernel-server
        state: restarted


- name: Install nfs-common
  hosts: master, workers
  become: true
  tasks:
    - name: Install nfs-common package
      ansible.builtin.apt:
        name: nfs-common
        state: present
        update_cache: yes

# - name: Deploy backend services
#   hosts: master
#   become: true
#   tasks:
#     - name: apply shared logs persistent volume
#       ansible.builtin.command: kubectl apply -f /home/manifests/shared-logs-pv.yaml
#     - name: apply shared logs persistent volume claim
#       ansible.builtin.command: kubectl apply -f /home/manifests/app/transcendence-pvc.yaml
#     - name: create namespace
#       ansible.builtin.command: kubectl apply -f /home/manifests/app/namespace.yaml
#     - name: Apply Config Map 
#       ansible.builtin.command: kubectl apply -f /home/manifests/app/config-map.yaml
#     - name: Apply api-gateway manifest
#       ansible.builtin.command: kubectl apply -f /home/manifests/app/api-gateway.yaml
#     - name: Apply chat-service manifest
#       ansible.builtin.command: kubectl apply -f /home/manifests/app/chat-service.yaml
#     - name: Apply auth-service manifest
#       ansible.builtin.command: kubectl apply -f /home/manifests/app/auth-service.yaml
#     - name: Apply user-service manifest
#       ansible.builtin.command: kubectl apply -f /home/manifests/app/user-service.yaml

# - name: Deploy elk stack
#   hosts: master
#   become: true
#   tasks:
#     - name: Create namespace for ELK stack
#       ansible.builtin.command: kubectl apply -f /home/manifests/elk/namespace.yaml
#     - name: Apply elasticsearch manifest
#       ansible.builtin.command: kubectl apply -f /home/manifests/elk/elasticsearch.yaml
#     - name: Apply kibana manifest
#       ansible.builtin.command: kubectl apply -f /home/manifests/elk/kibana.yaml
#     - name: Apply logstash manifest
#       ansible.builtin.command: kubectl apply -f /home/manifests/elk/logstash.yaml