
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_PATH")
}

enum FriendshipStatus {
  pending
  accepted
  declined
  cancelled
}

model UserProfile {
  id       Int    @id // Same ID as auth service user
 
  displayName String     @unique @map("display_name")
  avatar      String?
  bio         String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lastSeen DateTime @default(now()) @updatedAt @map("last_seen")

  sentFriendRequests     Friendship[] @relation("FriendshipRequester")
  receivedFriendRequests Friendship[] @relation("FriendshipReceiver")
  gameHistory           GameHistory[]
  blockedUsers          BlockedUser[] @relation("BlockerUser")
  blockedByUsers        BlockedUser[] @relation("BlockedUser")
  GameStats             GameStats?
  achievements          Achievements[] @relation("UserAchievement")

  @@map("user_profiles")
}

model Friendship {
  id          Int      @id @default(autoincrement())
  requesterId Int      @map("requester_id")
  receiverId  Int      @map("receiver_id")
  status      FriendshipStatus   @default(pending)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  requester UserProfile @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  receiver  UserProfile @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([requesterId, receiverId])
  @@map("friendships")
}

model BlockedUser {
  id        Int      @id @default(autoincrement())
  blockerId Int      @map("blocker_id")
  blockedId Int      @map("blocked_id")
  reason    String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  blocker UserProfile @relation("BlockerUser", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked UserProfile @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@map("blocked_users")
}

model GameStats {
  id         Int      @id
  userId     Int      @unique @map("user_id")
  totalGames Int      @default(0)
  wins       Int      @default(0)
  losses     Int      @default(0)
  tournaments Int     @default(0)
  tournamentsWins Int @default(0)
  bestStreak Int @default(0)
  currentStreak Int @default(0)

  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_stats")
}


model GameHistory {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  gameId       String   @map("game_id") // References game service
  opponentId   Int?     @map("opponent_id")
  gameType     String   @map("game_type") // 'classic', 'tournament', 'AI'
  result       String   // 'win', 'loss'
  playerScore  Int      @map("player_score")
  opponentScore Int     @map("opponent_score")
  duration     Int?     // Game duration in seconds
  playedAt     DateTime @default(now()) @map("played_at")

  // Relations
  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_history")
}

model Achievements {
  id           Int @id @default(autoincrement())
  title        String  @unique @map("achievement_name")
  description  String  @map("achievement_description")
  icon         String  @map("achievement_icon")


  users UserProfile[] @relation("UserAchievement")
  @@map("achievements")
}
